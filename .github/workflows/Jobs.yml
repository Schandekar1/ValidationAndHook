# This is a basic workflow to validate API documentation file which is checked in 

name: API Format validation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
 
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel 1
jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # MegaLinter
      - name: MegaLinter - API Format validation
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://oxsecurity.github.io/megalinter/flavors/
        uses:  oxsecurity/megalinter@v6
        env:
          # All available variables are described in documentation
          # https://oxsecurity.github.io/megalinter/configuration/
          VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          #VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE: .*api\/(.*)\.yaml #analyze all .yaml files under the api directory when workflow triggers
          OPENAPI_SPECTRAL_CLI_LINT_MODE: file
          OPENAPI_SPECTRAL_FILE_EXTENSIONS: ".yaml"
          OPENAPI_SPECTRAL_CONFIG_FILE: "validation/yamlSchema/openapi/validation-rules.yaml"  #path of the file where custom rules are defined
          ENABLE_LINTERS: OPENAPI_SPECTRAL         
          PRINT_ALPACA: false
          
  Webhook:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Call Webhook
        uses: distributhor/workflow-webhook@v2.0.3
        env:
         webhook_type: 'json-extended'
         webhook_url: ${{ secrets.WEBHOOK_URL }}
         webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
          
     # - name: Webhook
     #   uses: zzzze/webhook-trigger@master
     #   with:
     #       data: "{\"event_type\":\"push\"}"
     #       webhook_url: ${{ secrets.WEBHOOK_URL }}
     #       options: "-H \"Accept: application/vnd.github.everest-preview+json\" -H \"Authorization: token ${{ secrets.WEBHOOK_TOKEN } -H \"Header: X-Hub-Signature-256 ${{ GITHUB_SHA }}\""
     

